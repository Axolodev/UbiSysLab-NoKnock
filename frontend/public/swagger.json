{
  "openapi": "3.0.0",
  "info": {
    "title": "No-Knock API Documentation",
    "version": "1.0"
  },
  "security": [],
  "components": {
    "schemas": {
      "UserDTO": {
        "type": "object",
        "required": [
          "id",
          "email",
          "name",
          "accountType",
          "avatar",
          "available",
          "isPublic"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "NZYeL9zhepNhAeQavl5X"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "available": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          },
          "avatar": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "example": "Ms. Sc."
          },
          "department": {
            "type": "string",
            "nullable": true,
            "example": "Engineering"
          },
          "officeId": {
            "type": "string",
            "nullable": true,
            "example": "NZYeL9zhepNhAeQavl5X"
          },
          "pronouns": {
            "type": "string",
            "nullable": true,
            "example": ""
          },
          "userSettings": {
            "type": "string",
            "nullable": true,
            "example": "{}",
            "description": "JSON string containing user settings."
          }
        }
      },
      "AccountType": {
        "type": "string",
        "enum": ["Admin", "Maintainer", "User", "Guest"],
        "description": "The type of account for the user."
      },
      "AvailabilityStatus": {
        "type": "string",
        "enum": ["Available", "NotAvailable", "Private"],
        "description": "The availability status of the user."
      }
    }
  },
  "paths": {
    "/api/sensors/{id}": {
      "get": {
        "summary": "Get a sensor by ID",
        "description": "Returns a single sensor by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The sensor ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The sensor object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "jtXtrYmcN8D0zLpjKzWI"
                    },
                    "batteryStatus": {
                      "type": "integer",
                      "example": 35
                    },
                    "inputTime": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-06-04T15:47:43.913Z"
                    },
                    "isOpen": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                },
                "examples": {
                  "sensor": {
                    "value": {
                      "id": "jtXtrYmcN8D0zLpjKzWI",
                      "batteryStatus": 35,
                      "inputTime": "2025-06-04T15:47:43.913Z",
                      "isOpen": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid sensor ID"
          },
          "404": {
            "description": "Sensor not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "summary": "Update a sensor by ID",
        "description": "Updates a sensor's battery status and open state by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The sensor ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "batteryStatus": {
                    "type": "integer",
                    "example": 42
                  },
                  "isOpen": {
                    "type": "boolean",
                    "example": true
                  }
                }
              },
              "example": {
                "batteryStatus": 42,
                "isOpen": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sensor updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sensor updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid sensor ID or request body"
          },
          "404": {
            "description": "Sensor not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/sensors/byOfficeId": {
      "get": {
        "summary": "Get sensors by office ID",
        "description": "Returns a list of sensors associated with a specific office ID.",
        "parameters": [
          {
            "in": "query",
            "name": "officeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the office to filter sensors by."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sensors for the specified office ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "sensor123"
                      },
                      "name": {
                        "type": "string",
                        "example": "Temperature Sensor"
                      },
                      "officeId": {
                        "type": "string",
                        "example": "office456"
                      },
                      "inputTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-10-01T12:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid office ID provided."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/sensors": {
      "get": {
        "summary": "Get all sensors",
        "description": "Returns a list of all sensors.",
        "responses": {
          "200": {
            "description": "A list of sensors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "jtXtrYmcN8D0zLpjKzWI"
                      },
                      "batteryStatus": {
                        "type": "integer",
                        "example": 35
                      },
                      "inputTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-06-04T15:47:43.913Z"
                      },
                      "isOpen": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  }
                },
                "examples": {
                  "sensors": {
                    "value": [
                      {
                        "id": "jtXtrYmcN8D0zLpjKzWI",
                        "batteryStatus": 35,
                        "inputTime": "2025-06-04T15:47:43.913Z",
                        "isOpen": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Get a user by ID",
        "description": "Returns a single user by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The user object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                },
                "examples": {
                  "user": {
                    "value": {
                      "id": "yXGO7YkiXpQDSSqyxHz1",
                      "accountType": 1,
                      "email": "me@robruizr.dev",
                      "name": "Roberto Ruiz",
                      "officeId": "NZYeL9zhepNhAeQavl5X",
                      "pronouns": "he/him",
                      "userSettings": "{}",
                      "title": "Ms. Sc.",
                      "department": "Engineering",
                      "avatar": "https://example.com/avatar.jpg",
                      "isPublic": true,
                      "available": "Available"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "summary": "Update a user by ID",
        "description": "Updates a user's information by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {
                "name": "Roberto Ruiz",
                "email": "me@robruizr.dev"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}/workingBlock": {
      "get": {
        "summary": "Get working block by user ID",
        "description": "Returns the working block for a specific user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to retrieve the working block for."
          }
        ],
        "responses": {
          "200": {
            "description": "Working block found successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "block123"
                    },
                    "userId": {
                      "type": "string",
                      "example": "user123"
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-06-04T15:47:43.913Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/getAllPublicAndAvailable": {
      "get": {
        "summary": "Get all users",
        "description": "Returns a list of all users.",
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "yXGO7YkiXpQDSSqyxHz1"
                      },
                      "accountType": {
                        "type": "integer",
                        "example": 1
                      },
                      "email": {
                        "type": "string",
                        "example": "me@robruizr.dev"
                      },
                      "name": {
                        "type": "string",
                        "example": "Roberto Ruiz"
                      },
                      "officeId": {
                        "type": "string",
                        "example": "NZYeL9zhepNhAeQavl5X"
                      },
                      "password": {
                        "type": "string",
                        "example": "1234"
                      },
                      "pronouns": {
                        "type": "string",
                        "example": "he/him"
                      },
                      "userSettings": {
                        "type": "string",
                        "example": "{}"
                      }
                    }
                  }
                },
                "examples": {
                  "users": {
                    "value": [
                      {
                        "id": "yXGO7YkiXpQDSSqyxHz1",
                        "accountType": 1,
                        "email": "me@robruizr.dev",
                        "name": "Roberto Ruiz",
                        "officeId": "NZYeL9zhepNhAeQavl5X",
                        "password": "1234",
                        "pronouns": "he/him",
                        "userSettings": "{}"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "description": "Returns a list of all users.",
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDTO"
                  }
                },
                "examples": {
                  "users": {
                    "value": [
                      {
                        "id": "yXGO7YkiXpQDSSqyxHz1",
                        "accountType": 1,
                        "email": "me@robruizr.dev",
                        "name": "Roberto Ruiz",
                        "officeId": "NZYeL9zhepNhAeQavl5X",
                        "pronouns": "he/him",
                        "userSettings": "{}",
                        "title": "Ms. Sc.",
                        "department": "Engineering",
                        "avatar": "https://example.com/avatar.jpg",
                        "isPublic": true,
                        "available": "Available"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "tags": []
}
