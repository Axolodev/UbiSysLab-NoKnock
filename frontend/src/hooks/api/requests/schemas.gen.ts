// This file is auto-generated by @hey-api/openapi-ts

export const $UserDTO = {
  type: 'object',
  required: [
    'id',
    'email',
    'name',
    'accountType',
    'avatar',
    'available',
    'isPublic',
  ],
  properties: {
    id: {
      type: 'string',
      example: 'NZYeL9zhepNhAeQavl5X',
      readonly: true,
    },
    accountType: {
      $ref: '#/components/schemas/AccountType',
    },
    available: {
      $ref: '#/components/schemas/AvailabilityStatus',
    },
    avatar: {
      type: 'string',
      nullable: true,
      example: 'https://example.com/avatar.jpg',
      description:
        "URL to the user's chosen avatar image. Uploaded by the user.",
    },
    department: {
      type: 'string',
      nullable: true,
      example: 'Engineering',
    },
    email: {
      type: 'string',
    },
    image: {
      type: 'string',
      nullable: true,
      example: 'https://example.com/avatar.jpg',
      description:
        'File retrieved from OAuth service when creating user account.',
    },
    isPublic: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    office: {
      $ref: '#/components/schemas/OfficeDTO',
      nullable: true,
      readonly: true,
    },
    officeId: {
      type: 'string',
      nullable: true,
      example: 'NZYeL9zhepNhAeQavl5X',
    },
    pronouns: {
      type: 'string',
      nullable: true,
      example: '',
    },
    title: {
      type: 'string',
      nullable: true,
      example: 'Ms. Sc.',
    },
    userSettings: {
      type: 'string',
      nullable: true,
      example: '{}',
      description: 'JSON string containing user settings.',
    },
  },
} as const;

export const $AccountType = {
  type: 'string',
  enum: ['Admin', 'Maintainer', 'User', 'Guest'],
  description: 'The type of account for the user.',
} as const;

export const $AvailabilityStatus = {
  type: 'string',
  enum: ['Available', 'NotAvailable', 'Private'],
  description: 'The availability status of the user.',
} as const;

export const $OfficeDTO = {
  type: 'object',
  required: ['id', 'name', 'batteryStatus', 'isOpen'],
  properties: {
    id: {
      type: 'string',
      example: 'NZYeL9zhepNhAeQavl5X',
      readonly: true,
    },
    name: {
      type: 'string',
      example: 'Main Office',
    },
    sensor: {
      $ref: '#/components/schemas/SensorDTO',
      description: 'Sensor associated with the office.',
      nullable: true,
      readonly: true,
    },
    sensorId: {
      type: 'string',
      nullable: true,
      example: 'h9yRIrq5y6qEeh3IflZ5',
      description: 'ID of the sensor associated with the office.',
    },
  },
} as const;

export const $SensorDTO = {
  type: 'object',
  required: ['id', 'name'],
  properties: {
    id: {
      type: 'string',
      example: 'h9yRIrq5y6qEeh3IflZ5',
      readonly: true,
    },
    name: {
      type: 'string',
      example: 'Main Sensor',
      nullable: true,
    },
    status: {
      $ref: '#/components/schemas/SensorInputDTO',
      nullable: true,
    },
  },
} as const;

export const $SensorInputDTO = {
  type: 'object',
  required: ['id', 'batteryStatus', 'isOpen', 'sensorId'],
  properties: {
    id: {
      type: 'string',
      example: 'h9yRIrq5y6qEeh3IflZ5',
      readonly: true,
    },
    inputTime: {
      type: 'string',
      format: 'date-time',
      example: '2023-10-01T12:00:00Z',
      readonly: true,
    },
    batteryStatus: {
      type: 'number',
      example: '85',
      description: 'Battery status of the sensor in percentage.',
    },
    isOpen: {
      type: 'boolean',
      example: true,
      description: 'Indicates if the office is open.',
    },
    sensorId: {
      type: 'string',
      example: 'h9yRIrq5y6qEeh3IflZ5',
      description: 'ID of the sensor associated with the input.',
      writeOnly: true,
    },
  },
} as const;
