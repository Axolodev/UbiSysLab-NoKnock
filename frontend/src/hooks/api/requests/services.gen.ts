// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  GetApiSensorsByIdData,
  GetApiSensorsByIdResponse,
  PutApiSensorsByIdData,
  PutApiSensorsByIdResponse,
  GetApiSensorsByOfficeIdData,
  GetApiSensorsByOfficeIdResponse,
  GetApiSensorsResponse,
  GetApiUsersByIdData,
  GetApiUsersByIdResponse,
  PutApiUsersByIdData,
  PutApiUsersByIdResponse,
  GetApiUsersByIdWorkingBlockData,
  GetApiUsersByIdWorkingBlockResponse,
  GetApiUsersGetAllPublicAndAvailableResponse,
  GetApiUsersResponse,
} from './types.gen';

export class DefaultService {
  /**
   * Get a sensor by ID
   * Returns a single sensor by its ID.
   * @param data The data for the request.
   * @param data.id The sensor ID
   * @returns unknown The sensor object.
   * @throws ApiError
   */
  public static getApiSensorsById(
    data: GetApiSensorsByIdData,
  ): CancelablePromise<GetApiSensorsByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sensors/{id}',
      path: {
        id: data.id,
      },
      errors: {
        400: 'Invalid sensor ID',
        404: 'Sensor not found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Update a sensor by ID
   * Updates a sensor's battery status and open state by its ID.
   * @param data The data for the request.
   * @param data.id The sensor ID
   * @param data.requestBody
   * @returns unknown Sensor updated successfully
   * @throws ApiError
   */
  public static putApiSensorsById(
    data: PutApiSensorsByIdData,
  ): CancelablePromise<PutApiSensorsByIdResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/sensors/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Invalid sensor ID or request body',
        404: 'Sensor not found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get sensors by office ID
   * Returns a list of sensors associated with a specific office ID.
   * @param data The data for the request.
   * @param data.officeId The ID of the office to filter sensors by.
   * @returns unknown A list of sensors for the specified office ID.
   * @throws ApiError
   */
  public static getApiSensorsByOfficeId(
    data: GetApiSensorsByOfficeIdData,
  ): CancelablePromise<GetApiSensorsByOfficeIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sensors/byOfficeId',
      query: {
        officeId: data.officeId,
      },
      errors: {
        400: 'Invalid office ID provided.',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get all sensors
   * Returns a list of all sensors.
   * @returns unknown A list of sensors.
   * @throws ApiError
   */
  public static getApiSensors(): CancelablePromise<GetApiSensorsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sensors',
      errors: {
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get a user by ID
   * Returns a single user by their ID.
   * @param data The data for the request.
   * @param data.id The user ID
   * @returns UserDTO The user object.
   * @throws ApiError
   */
  public static getApiUsersById(
    data: GetApiUsersByIdData,
  ): CancelablePromise<GetApiUsersByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/users/{id}',
      path: {
        id: data.id,
      },
      errors: {
        400: 'Invalid user ID',
        404: 'User not found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Update a user by ID
   * Updates a user's information by their ID.
   * @param data The data for the request.
   * @param data.id The user ID
   * @param data.requestBody
   * @returns unknown User updated successfully
   * @throws ApiError
   */
  public static putApiUsersById(
    data: PutApiUsersByIdData,
  ): CancelablePromise<PutApiUsersByIdResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/users/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Invalid user ID',
        404: 'User not found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get working block by user ID
   * Returns the working block for a specific user.
   * @param data The data for the request.
   * @param data.id The ID of the user to retrieve the working block for.
   * @returns unknown Working block found successfully.
   * @throws ApiError
   */
  public static getApiUsersByIdWorkingBlock(
    data: GetApiUsersByIdWorkingBlockData,
  ): CancelablePromise<GetApiUsersByIdWorkingBlockResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/users/{id}/workingBlock',
      path: {
        id: data.id,
      },
    });
  }

  /**
   * Get all users
   * Returns a list of all users.
   * @returns unknown A list of users.
   * @throws ApiError
   */
  public static getApiUsersGetAllPublicAndAvailable(): CancelablePromise<GetApiUsersGetAllPublicAndAvailableResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/users/getAllPublicAndAvailable',
      errors: {
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get all users
   * Returns a list of all users.
   * @returns UserDTO A list of users.
   * @throws ApiError
   */
  public static getApiUsers(): CancelablePromise<GetApiUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/users',
      errors: {
        500: 'Internal Server Error',
      },
    });
  }
}
