// This file is auto-generated by @hey-api/openapi-ts

export type UserDTO = {
  id: string;
  accountType: AccountType;
  available: AvailabilityStatus;
  /**
   * URL to the user's chosen avatar image. Uploaded by the user.
   */
  avatar: string | null;
  department?: string | null;
  email: string;
  /**
   * File retrieved from OAuth service when creating user account.
   */
  image?: string | null;
  isPublic: boolean;
  name: string;
  office?: OfficeDTO | null;
  officeId?: string | null;
  pronouns?: string | null;
  title?: string | null;
  /**
   * JSON string containing user settings.
   */
  userSettings?: string | null;
};

/**
 * The type of account for the user.
 */
export type AccountType = 'Admin' | 'Maintainer' | 'User' | 'Guest';

/**
 * The availability status of the user.
 */
export type AvailabilityStatus = 'Available' | 'NotAvailable' | 'Private';

/**
 * Source of the working block.
 */
export type WorkingBlockSource = 'Sensor' | 'Calendar' | 'Prediction';

export type OfficeDTO = {
  id: string;
  name?: string;
  /**
   * Sensor associated with the office.
   */
  sensor?: SensorDTO | null;
  /**
   * ID of the sensor associated with the office.
   */
  sensorId?: string | null;
};

export type SensorDTO = {
  id: string;
  name: string | null;
  status?: SensorInputDTO | null;
};

export type SensorInputDTO = {
  id: string;
  inputTime?: string;
  /**
   * Battery status of the sensor in percentage.
   */
  batteryStatus: number;
  /**
   * Indicates if the office is open.
   */
  isOpen: boolean;
  /**
   * ID of the sensor associated with the input.
   */
  sensorId: string;
};

export type WorkingBlockDTO = {
  id: string;
  startTime: string;
  endTime: string;
  /**
   * Source of the working block.
   */
  source?: WorkingBlockSource;
  /**
   * ID of the user associated with the working block.
   */
  userId?: string;
  /**
   * User associated with the working block.
   */
  user?: UserDTO;
  /**
   * Availability status of the user during the working block.
   */
  availability?: AvailabilityStatus;
};

export type PutApiOfficesByOfficeIdData = {
  /**
   * The unique identifier of the office to update
   */
  officeId: string;
  requestBody: OfficeDTO;
};

export type PutApiOfficesByOfficeIdResponse = OfficeDTO;

export type GetApiOfficesByOfficeIdData = {
  /**
   * The unique identifier of the office to retrieve
   */
  officeId: string;
};

export type GetApiOfficesByOfficeIdResponse = OfficeDTO;

export type GetApiOfficesResponse = Array<OfficeDTO>;

export type PostApiOfficesData = {
  requestBody: OfficeDTO;
};

export type PostApiOfficesResponse = OfficeDTO;

export type GetApiSensorsByIdData = {
  /**
   * The sensor ID
   */
  id: string;
};

export type GetApiSensorsByIdResponse = {
  id?: string;
  batteryStatus?: number;
  inputTime?: string;
  isOpen?: boolean;
};

export type PostApiSensorsByIdData = {
  /**
   * The sensor ID
   */
  id: string;
  requestBody: SensorInputDTO;
};

export type PostApiSensorsByIdResponse = {
  message?: string;
};

export type GetApiSensorsByOfficeIdData = {
  /**
   * The ID of the office to filter sensors by.
   */
  officeId: string;
};

export type GetApiSensorsByOfficeIdResponse = Array<{
  id?: string;
  name?: string;
  officeId?: string;
  inputTime?: string;
}>;

export type GetApiSensorsResponse = Array<{
  id?: string;
  batteryStatus?: number;
  inputTime?: string;
  isOpen?: boolean;
}>;

export type GetApiUsersByIdData = {
  /**
   * The user ID
   */
  id: string;
};

export type GetApiUsersByIdResponse = UserDTO;

export type PutApiUsersByIdData = {
  /**
   * The user ID
   */
  id: string;
  requestBody: {
    [key: string]: unknown;
  };
};

export type PutApiUsersByIdResponse = {
  message?: string;
};

export type GetApiUsersByIdWorkingBlockData = {
  /**
   * The ID of the user to retrieve the working block for.
   */
  id: string;
};

export type GetApiUsersByIdWorkingBlockResponse = {
  id?: string;
  userId?: string;
  startTime?: string;
};

export type GetApiUsersGetAllPublicAndAvailableResponse = Array<{
  id?: string;
  accountType?: number;
  email?: string;
  name?: string;
  officeId?: string;
  password?: string;
  pronouns?: string;
  userSettings?: string;
}>;

export type GetApiUsersResponse = Array<UserDTO>;

export type $OpenApiTs = {
  '/api/offices/{officeId}': {
    put: {
      req: PutApiOfficesByOfficeIdData;
      res: {
        /**
         * Office updated successfully
         */
        200: OfficeDTO;
        /**
         * Bad request - Invalid input data
         */
        400: string;
        /**
         * Office not found
         */
        404: string;
        /**
         * Internal server error
         */
        500: string;
      };
    };
    get: {
      req: GetApiOfficesByOfficeIdData;
      res: {
        /**
         * Office retrieved successfully
         */
        200: OfficeDTO;
        /**
         * Office not found
         */
        404: string;
      };
    };
  };
  '/api/offices': {
    get: {
      res: {
        /**
         * Successfully retrieved offices
         */
        200: Array<OfficeDTO>;
        /**
         * Internal server error
         */
        500: string;
      };
    };
    post: {
      req: PostApiOfficesData;
      res: {
        /**
         * Office created successfully
         */
        200: OfficeDTO;
        /**
         * Bad request - Missing required fields
         */
        400: string;
        /**
         * Internal server error
         */
        500: string;
      };
    };
  };
  '/api/sensors/{id}': {
    get: {
      req: GetApiSensorsByIdData;
      res: {
        /**
         * The sensor object.
         */
        200: {
          id?: string;
          batteryStatus?: number;
          inputTime?: string;
          isOpen?: boolean;
        };
        /**
         * Invalid sensor ID
         */
        400: unknown;
        /**
         * Sensor not found
         */
        404: unknown;
        /**
         * Internal Server Error
         */
        500: unknown;
      };
    };
    post: {
      req: PostApiSensorsByIdData;
      res: {
        /**
         * Sensor updated successfully
         */
        200: {
          message?: string;
        };
        /**
         * Invalid sensor ID or request body
         */
        400: unknown;
        /**
         * Sensor not found
         */
        404: unknown;
        /**
         * Internal Server Error
         */
        500: unknown;
      };
    };
  };
  '/api/sensors/byOfficeId': {
    get: {
      req: GetApiSensorsByOfficeIdData;
      res: {
        /**
         * A list of sensors for the specified office ID.
         */
        200: Array<{
          id?: string;
          name?: string;
          officeId?: string;
          inputTime?: string;
        }>;
        /**
         * Invalid office ID provided.
         */
        400: unknown;
        /**
         * Internal Server Error
         */
        500: unknown;
      };
    };
  };
  '/api/sensors': {
    get: {
      res: {
        /**
         * A list of sensors.
         */
        200: Array<{
          id?: string;
          batteryStatus?: number;
          inputTime?: string;
          isOpen?: boolean;
        }>;
        /**
         * Internal Server Error
         */
        500: unknown;
      };
    };
  };
  '/api/users/{id}': {
    get: {
      req: GetApiUsersByIdData;
      res: {
        /**
         * The user object.
         */
        200: UserDTO;
        /**
         * Invalid user ID
         */
        400: unknown;
        /**
         * User not found
         */
        404: unknown;
        /**
         * Internal Server Error
         */
        500: unknown;
      };
    };
    put: {
      req: PutApiUsersByIdData;
      res: {
        /**
         * User updated successfully
         */
        200: {
          message?: string;
        };
        /**
         * Invalid user ID
         */
        400: unknown;
        /**
         * User not found
         */
        404: unknown;
        /**
         * Internal Server Error
         */
        500: unknown;
      };
    };
  };
  '/api/users/{id}/workingBlock': {
    get: {
      req: GetApiUsersByIdWorkingBlockData;
      res: {
        /**
         * Working block found successfully.
         */
        200: {
          id?: string;
          userId?: string;
          startTime?: string;
        };
      };
    };
  };
  '/api/users/getAllPublicAndAvailable': {
    get: {
      res: {
        /**
         * A list of users.
         */
        200: Array<{
          id?: string;
          accountType?: number;
          email?: string;
          name?: string;
          officeId?: string;
          password?: string;
          pronouns?: string;
          userSettings?: string;
        }>;
        /**
         * Internal Server Error
         */
        500: unknown;
      };
    };
  };
  '/api/users': {
    get: {
      res: {
        /**
         * A list of users.
         */
        200: Array<UserDTO>;
        /**
         * Internal Server Error
         */
        500: unknown;
      };
    };
  };
};
